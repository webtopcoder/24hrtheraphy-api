import { ObjectId } from 'mongodb';
import { ICommissionSetting } from './performer-commission.dto';
interface ValueSchedule {
    start: string;
    end: string;
    closed: boolean;
}
export interface ISchedule {
    mon: ValueSchedule;
    tue: ValueSchedule;
    wed: ValueSchedule;
    thu: ValueSchedule;
    fri: ValueSchedule;
    sat: ValueSchedule;
    sun: ValueSchedule;
}
export interface BankTransferInterface {
    type: string;
    withdrawCurrency: string;
    taxPayer: string;
    bankName: string;
    bankAddress: string;
    bankCity: string;
    bankState: string;
    bankZip: string;
    bankCountry: string;
    bankAcountNumber: string;
    bankSWIFTBICABA: string;
    holderOfBankAccount: string;
    additionalInformation: string;
    payPalAccount: string;
    checkPayable: string;
}
export interface DirectDepositInterface {
    depositFirstName: string;
    depositLastName: string;
    accountingEmail: string;
    directBankName: string;
    accountType: string;
    accountNumber: string;
    routingNumber: string;
}
export interface IPaxum {
    paxumName: string;
    paxumEmail: string;
    paxumAdditionalInformation: string;
}
export interface IBitpay {
    bitpayName: string;
    bitpayEmail: string;
    bitpayAdditionalInformation: string;
}
export interface IPerformerResponse {
    _id?: ObjectId;
    name?: string;
    firstName?: string;
    lastName?: string;
    email?: string;
    phone?: string;
    phoneCode?: string;
    status?: string;
    avatar?: string;
    idVerificationId?: ObjectId;
    streamingStatus?: string;
    streamingTitle?: string;
    documentVerificationId?: ObjectId;
    gender?: string;
    country?: string;
    city?: string;
    state?: string;
    zipcode?: string;
    address?: string;
    languages?: string[];
    tags?: string[];
    studioId?: ObjectId;
    categoryIds?: ObjectId[];
    categories?: string[];
    createdBy?: ObjectId;
    createdAt?: Date;
    updatedAt?: Date;
    height?: string;
    weight?: string;
    bio?: string;
    eyes?: string;
    maxParticipantsAllowed?: number;
    sexualReference?: string;
    aboutMe?: string;
    bust?: string;
    hair?: string;
    ethnicity?: string;
    pubicHair?: string;
    monthlyPrice?: number;
    yearlyPrice?: number;
    dateOfBirth?: Date;
    timezone?: string;
    bankTransferOption?: BankTransferInterface;
    directDeposit?: DirectDepositInterface;
    paxum?: IPaxum;
    bitpay?: IBitpay;
    stats?: {
        favorites?: number;
        totalVideos?: number;
        totalPhotos?: number;
        totalGalleries?: number;
        totalProducts?: number;
        totalStreamTime?: number;
        totalTokenEarned?: number;
        totalTokenSpent?: number;
    };
    isOnline?: boolean;
    watching?: number;
    isFavorite?: boolean;
    onlineAt?: Date;
    offlineAt?: Date;
    socials?: any;
    commissionSetting?: ICommissionSetting;
    privateCallPrice?: number;
    groupCallPrice?: number;
    lastStreamingTime?: Date;
}
export declare class PerformerDto {
    _id: ObjectId;
    name?: string;
    firstName?: string;
    lastName?: string;
    username?: string;
    email?: string;
    phone?: string;
    streamingStatus?: string;
    streamingTitle?: string;
    phoneCode?: string;
    status?: string;
    avatarId?: ObjectId;
    avatarPath?: string;
    idVerificationId?: ObjectId;
    documentVerificationId?: ObjectId;
    idVerification?: any;
    documentVerification?: any;
    releaseFormId?: ObjectId;
    releaseForm?: any;
    avatar?: any;
    gender?: string;
    country?: string;
    city?: string;
    state?: string;
    zipcode?: string;
    address?: string;
    languages?: string[];
    tags?: string[];
    studioId?: ObjectId;
    categoryIds?: ObjectId[];
    categories?: string[];
    schedule?: ISchedule;
    timezone?: string;
    noteForUser?: string;
    createdBy?: ObjectId;
    createdAt?: Date;
    updatedAt?: Date;
    height?: string;
    weight?: string;
    bio?: string;
    eyes?: string;
    sexualReference?: string;
    pubicHair?: string;
    hair?: string;
    bust?: string;
    aboutMe?: string;
    ethnicity?: string;
    bankTransferOption?: BankTransferInterface;
    directDeposit?: DirectDepositInterface;
    paxum?: IPaxum;
    bitpay?: IBitpay;
    monthlyPrice?: number;
    yearlyPrice?: number;
    dateOfBirth?: Date;
    stats?: {
        favorites?: number;
        totalVideos?: number;
        totalPhotos?: number;
        totalGalleries?: number;
        totalProducts?: number;
        totalStreamTime?: number;
        totalTokenEarned?: number;
        totalTokenSpent?: number;
    };
    balance?: number;
    isPerformer: boolean;
    emailVerified?: boolean;
    isOnline?: boolean;
    watching?: number;
    onlineAt?: Date;
    offlineAt?: Date;
    isStreaming?: boolean;
    isFavorite: boolean;
    isBlocked?: boolean;
    socials?: any;
    commissionSetting?: ICommissionSetting;
    maxParticipantsAllowed?: number;
    privateCallPrice: number;
    groupCallPrice: number;
    lastStreamingTime: Date;
    studioInfo: any;
    constructor(data?: Partial<PerformerDto>);
    toResponse(includePrivateInfo?: boolean): Partial<PerformerDto>;
    getName(): string;
    toSearchResponse(): {
        _id: ObjectId;
        avatar: string;
        username: string;
        gender: string;
        languages: string[];
        tags: string[];
        streamingStatus: string;
        streamingTitle: string;
        aboutMe: string;
        isFavorite: boolean;
        isBlocked: boolean;
        isStreaming: boolean;
        isOnline: boolean;
        watching: number;
        lastStreamingTime: Date;
        privateCallPrice: number;
        groupCallPrice: number;
        categoryIds: ObjectId[];
        categories: string[];
        stats: {
            favorites?: number;
            totalVideos?: number;
            totalPhotos?: number;
            totalGalleries?: number;
            totalProducts?: number;
            totalStreamTime?: number;
            totalTokenEarned?: number;
            totalTokenSpent?: number;
        };
        dateOfBirth: Date;
        offlineAt: Date;
    };
    toPublicDetailsResponse(): {
        _id: ObjectId;
        avatar: string;
        username: string;
        status: string;
        gender: string;
        country: string;
        streamingStatus: string;
        streamingTitle: string;
        city: string;
        state: string;
        zipcode: string;
        address: string;
        languages: string[];
        categoryIds: ObjectId[];
        categories: string[];
        schedule: ISchedule;
        timezone: string;
        noteForUser: string;
        height: string;
        weight: string;
        bio: string;
        eyes: string;
        tags: string[];
        hair: string;
        aboutMe: string;
        pubicHair: string;
        bust: string;
        ethnicity: string;
        sexualReference: string;
        monthlyPrice: number;
        yearlyPrice: number;
        stats: {
            favorites?: number;
            totalVideos?: number;
            totalPhotos?: number;
            totalGalleries?: number;
            totalProducts?: number;
            totalStreamTime?: number;
            totalTokenEarned?: number;
            totalTokenSpent?: number;
        };
        createdAt: Date;
        updatedAt: Date;
        dateOfBirth: Date;
        isOnline: boolean;
        watching: number;
        isStreaming: boolean;
        isFavorite: boolean;
        isBlocked: boolean;
        socials: any;
        privateCallPrice: number;
        groupCallPrice: number;
        maxParticipantsAllowed: number;
        onlineAt: Date;
        offlineAt: Date;
        lastStreamingTime: Date;
    };
}
export declare class BlockSettingDto {
    _id: ObjectId;
    performerId: ObjectId;
    countries: string[];
    userIds: ObjectId[] | string[];
    usersInfo?: any[];
    createdAt: Date;
    updatedAt: Date;
    constructor(data?: Partial<BlockSettingDto>);
}
export {};
